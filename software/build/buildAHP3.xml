<?xml version="1.0" encoding="utf-8"?>

<!--L
   Copyright SAIC, Ellumen and RSNA (CTP)


   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/national-biomedical-image-archive/LICENSE.txt for details.
L-->

<!--need to define GLOBUS_LOCATION -->
<project name="nbia" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>
		This is the master build file for the NBIA project.  NBIA web application, NBIA grid service and CTP
</description>
	<property name="project.name" value="nbia" />
	<property name="nbia.build.file" value="build.xml" />
	<property name="properties.file" value="defaultAHP3.properties" />
	<property file="${properties.file}" />
	<property name="build.dir" location="." />
	<property name="software.dir" location=".." />
	<property name="common.dir" location="${software.dir}/common" />
	<property name="common.dist.relative.dir" value="common" />
	<property name="common.lib.dir" location="${software.dir}/common/resources/lib" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="ivy.settings.dir" location="${common.dir}/ivy" />
	<property name="lib.dir" location="${target.dir}/lib" />
	<property name="temp.dir" location="${target.dir}/temp" />
	<property name="dist.dir" location="${target.dir}/dist" />
	<property name="common.resources.dir" location="${common.dir}/resources" />
	<property name="nbia-dao.base.dir" value="${software.dir}/nbia-dao" />
	<property name="ncia-core-grid.base.dir" value="${software.dir}/ncia-core-grid-transfer" />
	<property name="nbia-grid.base.dir" value="${software.dir}/nbia-service" />
	<property name="nbia-ctp.base.dir" value="${software.dir}/nbia-ctp-working" />
	<property name="nbia-services-commons.base.dir" value="${software.dir}/nbia-services-commons" />
	<property name="image-zipping-mdb.base.dir" value="${software.dir}/image-zipping-mdb" />
	<property name="image-deletion-mdb.base.dir" value="${software.dir}/image-deletion-mdb" />
	<property name="nbia-services-grid.base.dir" value="${software.dir}/nbia-services-grid" />
	<property name="nbia-domain.base.dir" value="${software.dir}/nbia-domain" />
	<property name="nbia-util.base.dir" value="${software.dir}/nbia-util" />
	<property name="nbia-web.base.dir" value="${software.dir}/nbia-web" />
	<property name="nbia-download-manager.base.dir" value="${software.dir}/nbia-download-manager" />
	<property name="nbia-download.base.dir" value="${software.dir}/nbia-download" />
	<property name="nbia-remote-search.base.dir" value="${software.dir}/nbia-remote-search" />
	<property name="global.ivy.settings.file" location="${software.dir}/common/ivysettings.xml" />
	<property name="db-install.src.dir" value="${common.dir}/resources/db/" />
	<property name="db-upgrade.src.dir" value="${common.dir}/resources/db-incr/" />
	<property name="nbia-resource.artifact.dir" value="${software.dir}/common/resources" />
	<property name="dist.exploded.dir" value="${dist.dir}/exploded" />
	<property name="tools.dist.relative.dir" value="tools" />
	<property name="tools.dist.dir" value="${dist.exploded.dir}/${tools.dist.relative.dir}" />
	<property name="common.dist.dir" value="${dist.exploded.dir}/${common.dist.relative.dir}" />
	<property name="db-install.dist.dir" value="${dist.exploded.dir}/db/db-install/" />
	<property name="db-upgrade.dist.dir" value="/tmp/ncia/nbia" />
	<property name="jboss-conf.dist.dir" value="${dist.exploded.dir}/${jboss-conf.dist.relative.dir}" />
	<property name="ncia-core-grid.dist.relative.dir" value="ncia-core-grid-transfer" />
	<property name="ncia-core-grid.dist.dir" value="${dist.exploded.dir}/${ncia-core-grid.dist.relative.dir}" />
	<property name="nbia-grid.dist.relative.dir" value="nbia-service" />
	<property name="nbia-grid.dist.dir" value="${dist.exploded.dir}/${nbia-grid.dist.relative.dir}" />
	<property name="nbia-ctp.dist.relative.dir" value="nbia-ctp" />
	<property name="nbia-ctp.dist.dir" value="${dist.exploded.dir}/${nbia-ctp.dist.relative.dir}" />
	<property name="nbia-web.dist.relative.dir" value="nbia-ear" />
	<property name="nbia-web.dist.dir" value="${dist.exploded.dir}/${nbia-web.dist.relative.dir}" />
	<property name="jai.linux.dest.file" value="${tools.dist.dir}/${jai.linux.binaries.file}" />
	<property name="jai.windows.dest.file" value="${tools.dist.dir}/${jai.windows.binaries.file}" />
	<property name="nbia-grid.artifact.file" value="NBIAService.zip" />
	<property name="ncia-core-grid.artifact.file" value="NciaCoreService.zip" />
	<property name="working.dir" location="${target.dir}/working" />
	<property name="db.dir.src" location="${basedir}/db" />
	<property name="db.dir.dest" location="${working.dir}/db" />
	<property name="download.dir" location="${target.dir}/download" />
	<property name="cagrid.target.co.dir" location="${target.dir}/cagrid-target" />
	<!--These properties are the list of files used by the install of the database for each type -->
	<property name="db.install.create.mysql.file.list" value="ncia_mysql_nodata.sql,nciaDbInit.sql" />
	<property name="db.install.create.oracle.file.list" value="ddl.sql,dml_populate.sql,fk.sql" />
	<!-- targets -->
	<property name="nbia-ctp.build.target" value="all" />
	<property name="nbia-services-commons.build.target" value="run" />
	<property name="nbia-dao.build.target" value="run" />
	<property name="nbia-services-grid.build.target" value="run" />
	<property name="nbia-domain.build.target" value="all" />
	<property name="nbia-web.build.target" value="run" />
	<property name="nbia-download-manager.build.target" value="run" />
	<property name="nbia-download.build.target" value="run" />
	<!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
	<property name="install.target" value="install" />
	<property name="upgrade.target" value="upgrade" />
	<property name="upgrade.jboss.target" value="upgrade:jboss" />
	<property name="upgrade.ncia-core-grid.target" value="upgrade:ncia-core-grid" />
	<property name="upgrade.ncia-core-grid-unsecured.target" value="upgrade:ncia-core-grid-unsecured" />
	<property name="upgrade.nbia-grid.target" value="upgrade:nbia-grid" />
	<property name="install.jboss.target" value="install:jboss" />
	<property name="install.ncia-core-grid.target" value="install:ncia-core-grid" />
	<property name="install.ncia-core-grid-unsecured.target" value="install:ncia-core-grid-unsecured" />
	<property name="install.nbia-grid.target" value="install:nbia-grid" />
	<property name="ctp.install.target" value="install:ctp:server" />
	<property name="ctp.upgrade.target" value="upgrade:ctp:server" />
	<!-- output directory properties -->
	<property name="ncia-core-grid.artifact.dir" value="${ncia-core-grid.base.dir}/target" />
	<property name="nbia-grid.artifact.dir" value="${nbia-grid.base.dir}/target" />
	<property name="nbia-ctp.artifact.dir" value="${nbia-ctp.base.dir}/target" />
	<!-- Paths -->
	<path id="project.classpath">
		<fileset dir="${lib.dir}">
			<include name="ivy-*.jar" />
		</fileset>
	</path>
	<path id="common.lib.classpath">
		<fileset dir="${common.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath refid="common.lib.classpath" />
	</taskdef>
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="common.lib.classpath" />
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
		<classpath>
			<pathelement path="${common.lib.dir}/xmltask-1.15.1.jar" />
		</classpath>
	</taskdef>
	<taskdef name="svn" classpathref="common.lib.classpath" classname="org.tigris.subversion.svnant.SvnTask" />
	<switch value="${database.type}">
		<case value="oracle">
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect" />
			<property name="database.driver.file" value="${common.resources.dir}/lib/ojdbc14-10.2.0.3.0.jar" />
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver" />
			<property name="database.schema" value="${database.name}" />
		</case>
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect" />
			<property name="database.driver.file" value="${common.resources.dir}/lib/mysql-connector-java-5.1.13.jar" />
			<property name="database.driver" value="com.mysql.jdbc.Driver" />
			<property name="database.schema" value="${database.name}" />
		</case>
		<default>
		</default>
	</switch>
	
	<!-- target starts here -->
	<target name="clean">
		<delete dir="${dist.dir}" />
		<delete dir="${temp.dir}" />
		<delete dir="${ncia-core-grid.artifact.dir}" />
		<delete dir="${nbia-grid.artifact.dir}" />
		<delete dir="${lib.dir}" />
		<delete dir="${cagrid.target.co.dir}" />
		<delete dir="${download.dir}" />
		<delete dir="${target.dir}" />
	</target>
	
	<target name="ivy:clean">
		<echo message="Deleting ${user.home}/.ivy2-${ant.project.name}-nbia5" />
		<delete dir="${user.home}/.ivy2-${ant.project.name}5" />
	</target>
	
	<target name="init">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${ncia-core-grid.artifact.dir}" />
		<mkdir dir="${nbia-grid.artifact.dir}" />
		<mkdir dir="${ncia-core-grid.dist.dir}" />
		<mkdir dir="${nbia-grid.dist.dir}" />
		<mkdir dir="${nbia-web.dist.dir}" />
		<mkdir dir="${db-install.dist.dir}" />
		<mkdir dir="${db-upgrade.dist.dir}" />
		<mkdir dir="${tools.dist.dir}" />
		<mkdir dir="${download.dir}" />
		<mkdir dir="${lib.dir}" />
	</target>
	
	
	<target name="build:nbia:portal:config" description="Builds jboss configuration files for NBIA portal" depends="
		init">
	
		<delete dir="${common.dist.dir}" />
		
		<copy file="${common.resources.dir}/jboss-conf/ncia-ds.xml" todir="${common.dist.dir}">
			<filterset>
				<filter token="database.user" value="${database.user}" />
				<filter token="database.password" value="${database.password}" />
				<filter token="database.url" value="${database.url}" />
				<filter token="database.driver" value="${database.driver}" />
			</filterset>
		</copy>
		
		<copy file="${common.resources.dir}/jboss-conf/properties-service.xml" todir="${common.dist.dir}" overwrite="true">
			<filterset>
				<filter token="gov.nih.nci.ncia.imaging.server.url" value="${gov.nih.nci.ncia.imaging.server.url}" />
				<filter token="gov.nih.nci.ncia.mapped.image.path.head" value="${gov.nih.nci.ncia.mapped.image.path.head}" />
				<filter token="gov.nih.nci.ncia.image.path.pattern" value="${gov.nih.nci.ncia.image.path.pattern}" />
				<filter token="gov.nih.nci.ncia.frontier.http.address" value="${gov.nih.nci.ncia.frontier.http.address}" />
				<filter token="gov.nih.nci.ncia.jboss.mq.url" value="${gov.nih.nci.ncia.jboss.mq.url}" />
				<filter token="gov.nih.nci.ncia.zip.location" value="${gov.nih.nci.ncia.zip.location}" />
				<filter token="gov.nih.nci.ncia.ftp.location" value="${gov.nih.nci.ncia.ftp.location}" />
				<filter token="gov.nih.nci.ncia.grid.local.node.name" value="${gov.nih.nci.ncia.grid.local.node.name}" />
				<filter token="gov.nih.nci.ncia.ui.uid.display.length" value="${gov.nih.nci.ncia.ui.uid.display.length}" />
				<filter token="gov.nih.nci.ncia.ftp.url" value="${gov.nih.nci.ncia.ftp.url}" />
				<filter token="gov.nih.nci.ncia.jboss.public.url" value="${gov.nih.nci.ncia.jboss.public.url}" />
				<filter token="gov.nih.nci.ncia.admin.email" value="${gov.nih.nci.ncia.admin.email}" />
				<filter token="mail.smtp.server" value="${mail.smtp.server}" />
				<filter token="gov.nih.nci.ncia.installationSite" value="${gov.nih.nci.ncia.installationSite}" />
				<filter token="enabled_guest_account" value="${enabled_guest_account}" />
				<filter token="guest_username" value="${guest_username}" />
				<filter token="gov.nih.nci.ncia.download.server.url" value="${gov.nih.nci.ncia.download.server.url}" />
				<filter token="enable_classic_download" value="${enable_classic_download}" />
				<filter token="registration.email.subject" value="${registration.email.subject}" />
				<filter token="grid.index.url" value="${grid.index.url}" />
				<filter token="local.grid.uri" value="${local.grid.uri}" />
				<filter token="discover.remote.nodes" value="${discover.remote.nodes}" />
				<filter token="database.type" value="${database.type}" />
				<filter token="show.collection.search.criteria" value="${show.collection.search.criteria}" />
				<filter token="show.anatomical.search.criteria" value="${show.anatomical.search.criteria}" />
				<filter token="gov.nih.nci.ncia.download.no.retry" value="${gov.nih.nci.ncia.download.no.retry}" />
			</filterset>
		</copy>
		
	 <copy file="${common.resources.dir}/jboss-conf/server.xml" tofile="${common.dist.dir}/server.xml">
			<filterset>
				<filter token="nbia.portal.jboss.home" value="${nbia.portal.jboss.home}" />
				<filter token="jboss.server.name" value="${nbia.portal.jboss.server.name}" />
			</filterset>
		</copy>
		
		<copy file="${common.resources.dir}/jboss-conf/login-config.xml" todir="${common.dist.dir}">
		</copy>
		<replaceregexp match="\&lt;/policy\&gt;" replace="" flags="gm">
			<fileset file="${common.dist.dir}/login-conf.xml" includes="*" />
		</replaceregexp>
		<!-- switch for db or ldap -->
		<if>
				<equals arg1="${authentication.type}" arg2="ldap"/>
				<then>
					<copy file="${common.resources.dir}/jboss-conf/login-config.ldap-block.xml" tofile="${common.dist.dir}/login-config.block.xml">
						<filterset>
							<filter token="application.context.name" value="${application.context.name}" />
							<filter token="ldap.url" value="${ldap.url}" />
							<filter token="ldap.basedn" value="${ldap.basedn}" />
						</filterset>
					</copy>
				</then>
				<else>
					<copy file="${common.resources.dir}/jboss-conf/login-config.db-block.xml" tofile="${common.dist.dir}/login-config.block.xml">
						<filterset>
							<filter token="application.context.name" value="${application.context.name}" />
							<filter token="database.user" value="${database.user}" />
							<filter token="database.password" value="${database.password}" />
							<filter token="database.url" value="${database.url}" />
							<filter token="database.driver" value="${database.driver}" />
						</filterset>
					</copy>
				</else>
			</if>
		<concat destfile="${common.dist.dir}/login-config.xml" append="true">
			<filelist dir="${common.dist.dir}" files="login-config.block.xml" />
		</concat>
		<delete file="${common.dist.dir}/login-config.block.xml" />
		<!--  switch for db or ldap -->
		<concat destfile="${common.dist.dir}/login-config.xml" append="true">&lt;/policy&gt;</concat>

		<!--- customize jboss-log4j.xml -->
		<copy file="${common.resources.dir}/jboss-conf/jboss-log4j.xml.nci" tofile="${common.dist.dir}/jboss-log4j.xml" />
		<replaceregexp file="${common.dist.dir}/jboss-log4j.xml" byline="true" match="^(&lt;!DOCTYPE.*)" replace="&lt;!\-\-\1\-\-&gt;" />
		<xmltask preservetype="true" failWithoutMatch="true" source="${common.dist.dir}/jboss-log4j.xml" dest="${common.dist.dir}/jboss-log4j.xml">
			<remove path="/log4j:configuration/appender[@class='org.jboss.logging.appender.DailyRollingFileAppender']" />
		</xmltask>
		<xmltask preservetype="true" failWithoutMatch="true" source="${common.dist.dir}/jboss-log4j.xml" dest="${common.dist.dir}/jboss-log4j.xml">
			<insert path="log4j:configuration/appender[@class='org.apache.log4j.ConsoleAppender']" position="before">
				<![CDATA[
							<!-- NCI Additions -->
				<!-- A size based file rolling appender -->
				<appender name="FILE" class="org.jboss.logging.appender.RollingFileAppender">
					<errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
					<param name="File" value="${jboss.server.log.dir}/server.log"/>
					<param name="Append" value="True"/>
					<param name="MaxFileSize" value="${log4j.maxFileSize}"/>
					<param name="MaxBackupIndex" value="${log4j.maxDays}"/>
					<layout class="org.apache.log4j.PatternLayout">
						<param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
					</layout>
				</appender>
							]]>
						</insert>
		</xmltask>
		<xmltask source="${common.dist.dir}/jboss-log4j.xml" dest="${common.dist.dir}/jboss-log4j.xml">
			<insert path="/log4j:configuration/root" position="before" file="${common.resources.dir}/jboss-conf/log4j.block.xml" />
		</xmltask>
		<replaceregexp file="${common.dist.dir}/jboss-log4j.xml" byline="true" match="^&lt;!\-\-(&lt;!DOCTYPE.*)\-\-&gt;" replace="\1" />
		<replaceregexp file="${common.dist.dir}/jboss-log4j.xml" byline="true" match="^(&lt;log4j:configuration.*)" replace="\1${line.separator}&lt;!-- NCI Additions --&gt;" />


		<!-- need to replace the ports-->
		<copy file="${common.resources.dir}/jboss-conf/bindings-jboss-beans.xml" todir="${common.dist.dir}">
		<filterset>
							<filter token="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
							<filter token="jboss.server.rmi.port" value="${jboss.server.rmi.port}" />
							<filter token="jboss.web.service.port" value="${jboss.web.service.port}" />
							<filter token="jboss.service.rmiobject.port" value="${jboss.service.rmiobject.port}" />
							<filter token="jboss.server.bind.port" value="${jboss.server.bind.port}" />
							<filter token="jboss.hajndi.port" value="${jboss.hajndi.port}" />
							<filter token="jboss.hajrmi.port" value="${jboss.hajrmi.port}" />
							<filter token="jboss.service.rmiobject.port" value="${jboss.service.rmiobject.port}" />
							<filter token="jboss.pooledha.port" value="${jboss.pooledha.port}" />
							<filter token="jboss.cobraorb.port" value="${jboss.cobraorb.port}" />
							<filter token="jboss.snmp-trapd.port" value="${jboss.snmp-trapd.port}" />
							<filter token="jboss.snmp.port" value="${jboss.snmp.port}" />
							<filter token="jboss.jmx-rmi.port" value="${jboss.jmx-rmi.port}" />
							<filter token="jboss.server.port" value="${jboss.server.port}" />
							<filter token="jboss.jms.port" value="${jboss.jms.port}" />
			</filterset>
		</copy>
		
		<copy file="${common.resources.dir}/jboss-conf/destinations-service.xml" todir="${common.dist.dir}">
		</copy>
	
		<copy file="${common.resources.dir}/jboss-conf/ejb3-connectors-jboss-beans.xml" todir="${common.dist.dir}">
		<filterset>
				<filter token="jboss.ejbinvoker.port" value="${jboss.ejbinvoker.port}" />
		</filterset>
		</copy>
		<copy file="${common.resources.dir}/jboss-conf/jboss-web.xml" todir="${common.dist.dir}">
		</copy>
		<copy file="${common.resources.dir}/jboss-conf/DataSourceItem.xml" todir="${common.dist.dir}">
		</copy>
		<copy file="${common.resources.dir}/jboss-conf/relationship.xml" todir="${common.dist.dir}">
		</copy>
		<copy file="${common.resources.dir}/lib/mysql-connector-java-5.1.13.jar" todir="${common.dist.dir}" />
		<copy file="${common.resources.dir}/lib/ojdbc14-10.2.0.3.0.jar" todir="${common.dist.dir}" />
		<copy file="${common.resources.dir}/lib/clm-4.0.jar" todir="${common.dist.dir}" />
		<copy file="${common.resources.dir}/lib/puretls.jar" todir="${common.dist.dir}" />	
	</target>
	
	
	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		clean,
		init,
		build:nbia:portal:config, compute-tag-properties, build:nbia-web, build:nbia-secure-grid, build:nbia-unsecure-grid, dist:ctp-client, dist:ctp-server">
	</target>
	
		<target name="build:all:niams" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
			build:all, -branding">
	</target>
	
	<target name="build:nbia-domain" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-domain.build.target}" dir="${nbia-domain.base.dir}">
			<property name="project.name" value="${project.name}" />
		</ant>
	</target>
	<target name="build:nbia-util" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="run" dir="${nbia-util.base.dir}">
			<property name="project.name" value="${project.name}" />
		</ant>
	</target>
	
	<target name="build:nbia-services-grid" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-services-grid.build.target}" dir="${nbia-services-grid.base.dir}">
			<property name="project.name" value="${project.name}" />
		</ant>
	</target>
	
	<target name="build:nbia-dao" depends="init,
                                         build:nbia-util,
                                         build:nbia-services-grid,
                                         build:nbia-domain">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-dao.build.target}" dir="${nbia-dao.base.dir}">
			<!--property name="project.name" value="${project.name}"/>

      <property name="database.type" value="${database.type}"/>
      <property name="database.user" value="${database.user}"/>
      <property name="database.password" value="${database.password}"/>
      <property name="database.url" value="${database.url}"/>
      <property name="database.driver" value="${database.driver}"/-->
		</ant>
	</target>
	
	<target name="compute-tag-properties">
	   <if>
             <and>
               <isset property="nbia_prod_build_tag" />
               <not> <equals arg1="${nbia_prod_build_tag}" arg2="master"/></not> 
             </and>              
	     <then>
		  <property name="nbia_prod_build_tag.final" value="${nbia_prod_build_tag}"/>
		  <echo message="!!!  nbia_prod_build_tag =${nbia_prod_build_tag.final}"/>
	      </then>
	      <else>
		 <property name="nbia_prod_build_tag.final" value="dev-snapshot ${DSTAMP} ${TSTAMP}"/>
		 <echo message="!!!  nbia_prod_build_tag =${nbia_prod_build_tag.final}"/>
	     </else>
	   </if>    
	   <echo message=" !!! final  nbia_prod_build_tag =${nbia_prod_build_tag.final}"/>
	</target>
	
	<target name="dist:tools:retrieve:jai">
		<get src="${jai.linux.src.url}" dest="${jai.linux.dest.file}" />
		<get src="${jai.windows.src.url}" dest="${jai.windows.dest.file}" />
	</target>
	
	<target name="build:nbia-ctp" depends="init,
                                         build:nbia-util,
                                         build:nbia-domain,
                                         compute-tag-properties">
		<!-- so we don't modify ncia-ctp directory and leave little pieces of poo that can be committed later by unsuspecting or uncaring people -->
		<mkdir dir="../nbia-ctp-working" />
		<copy todir="../nbia-ctp-working">
			<fileset dir="../nbia-ctp" />
		</copy>
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-ctp.build.target}" dir="${nbia-ctp.base.dir}">
			<property name="project.name" value="${project.name}" />
			<property name="nbia.version" value="${nbia.version}" />
			<property name="nbia_prod_build_tag.final" value="${nbia_prod_build_tag.final}" />
			<property name="database.user" value="${database.user}" />
			<property name="database.password" value="${database.password}" />
			<property name="database.system.user" value="${database.system.user}" />
			<property name="database.system.password" value="${database.system.password}" />
			<property name="database.url" value="${database.url}" />
			<property name="database.driver" value="${database.driver}" />
			<property name="database.dialect" value="${database.dialect}" />
			<property name="database.type" value="${database.type}" />
		</ant>
		<mkdir dir="${nbia-ctp.dist.dir}" />
		<copy todir="${nbia-ctp.dist.dir}">
			<fileset dir="${nbia-ctp.artifact.dir}">
				<include name="CTP-installer.jar" />
			</fileset>
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/FileSender">
			<fileset dir="${nbia-ctp.base.dir}/FileSender" />
		</copy>
		<copy todir="${nbia-ctp.dist.dir}">
			<fileset file="${nbia-ctp.base.dir}/target/nbiaDatabaseUpdator.jar" />
		</copy>
		<copy file="${nbia-ctp.base.dir}/target/dbupdator.sh" todir="${nbia-ctp.dist.dir}"/>
		<delete dir="../nbia-ctp-working" />
	</target>

	<target name="dist:ctp-client" description="build and configure ctp client" depends="build:nbia-ctp">
		<mkdir dir="${nbia-ctp.dist.dir}/CTP_Client" />
		<mkdir dir="${nbia-ctp.dist.dir}/CTP_Client/CTP/logs" />
		<unjar src="${nbia-ctp.dist.dir}/CTP-installer.jar" dest="${nbia-ctp.dist.dir}/CTP_Client" />
		<!-- copy common files to the client -->
		<copy todir="${nbia-ctp.dist.dir}/CTP_Client/CTP">
			<fileset dir="${common.dir}/resources/ctp/client">
				<include name="ctp.*" />
			</fileset>
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/CTP_Client/CTP/examples" overwrite="true">
			<fileset dir="${common.dir}/resources/ctp/client">
				<include name="example*" />
			</fileset>
		</copy>
		<copy file="${common.dir}/resources/ctp/client/users.xml" todir="${nbia-ctp.dist.dir}/CTP_Client/CTP">
			<filterset>
				<filter token="ctp.client.admin.username" value="${ctp.client.admin.username}" />
				<filter token="ctp.client.admin.password" value="${ctp.client.admin.password}" />
				<filter token="ctp.client.king.username" value="${ctp.client.king.username}" />
				<filter token="ctp.client.king.password" value="${ctp.client.king.password}" />
			</filterset>
		</copy>
		<copy file="${common.dir}/resources/ctp/client/config-block.xml" tofile="${nbia-ctp.dist.dir}/CTP_Client/CTP/config.xml">
			<filterset>
				<filter token="ctp.client.port" value="${ctp.client.port}" />
				<filter token="ctp.client.http_import_service.port" value="${ctp.client.http_import_service.port}" />
				<filter token="ctp.server.verifier.port" value="${ctp.server.verifier.port}" />
				<filter token="ctp.server.http_import_service.port" value="${ctp.server.http_import_service.port}" />
				<filter token="ctp.client.dicom_import_service.port" value="${ctp.client.dicom_import_service.port}" />
				<filter token="ctp.client.exportService.username" value="${ctp.client.exportService.username}" />
				<filter token="ctp.client.exportService.password" value="${ctp.client.exportService.password}" />
			</filterset>
		</copy>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Client/org" />
		<delete dir="${nbia-ctp.dist.dir}/CTP_Client/META-INF" />
		<delete dir="${nbia-ctp.dist.dir}/CTP_Client/config" />
		<!-- copy and configure FileSender files -->
		<copy todir="${nbia-ctp.dist.dir}/CTP_Client/FileSender">
			<fileset dir="${nbia-ctp.dist.dir}/FileSender" />
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/CTP_Client/FileSender">
			<fileset dir="${common.dir}/resources/ctp/client">
				<include name="filesender.*" />
			</fileset>
		</copy>
		<copy file="${common.dir}/resources/ctp/client/FileSender.properties" todir="${nbia-ctp.dist.dir}/CTP_Client/FileSender" overwrite="Yes">
			<filterset>
				<filter token="ctp.client.http_import_service.port" value="${ctp.client.http_import_service.port}" />
			</filterset>
		</copy>
		<!-- zip up -->
		<zip update="false" destfile="${nbia-ctp.dist.dir}/CTP_Client.zip">
			<zipfileset dir="${nbia-ctp.dist.dir}/CTP_Client/" />
		</zip>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Client/" />
		<delete dir="${nbia-ctp.dist.dir}/FileSender" />
		<delete dir="${nbia-ctp.dist.dir}/CTP-installer.jar" />
	</target>
	
	<target name="dist:ctp-server" description="build and configure ctp server" depends="build:nbia-ctp, dist:tools:retrieve:jai">
		<mkdir dir="${nbia-ctp.dist.dir}/CTP_Server" />
		<unjar src="${nbia-ctp.dist.dir}/CTP-installer.jar" dest="${nbia-ctp.dist.dir}/CTP_Server" />
		<!-- after unzipping CTP, move the users.xml back on top -->
		<copy file="${common.dir}/resources/ctp/server/users.xml" todir="${nbia-ctp.dist.dir}/CTP_Server/CTP">
			<filterset>
				<filter token="ctp.server.admin.username" value="${ctp.server.admin.username}" />
				<filter token="ctp.server.admin.password" value="${ctp.server.admin.password}" />
				<filter token="ctp.server.king.username" value="${ctp.server.king.username}" />
				<filter token="ctp.server.king.password" value="${ctp.server.king.password}" />
			</filterset>
		</copy>
		<copy file="${common.dir}/resources/ctp/server/config-block.xml" tofile="${nbia-ctp.dist.dir}/CTP_Server/CTP/config.xml">
			<filterset>
				<filter token="ctp.server.port" value="${ctp.server.port}" />
				<filter token="ctp.server.http_import_service.port" value="${ctp.server.http_import_service.port}" />
				<filter token="ctp.server.require_authentication" value="${ctp.server.require_authentication}" />
				<filter token="ctp.server.storage_service.root" value="${ctp.server.storage_service.root}" />
				<filter token="ctp.server.storage_service.index" value="${ctp.server.storage_service.index}" />
				<filter token="ctp.server.verifier.port" value="${ctp.server.verifier.port}" />
			</filterset>
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/CTP_Server/CTP">
			<fileset dir="${common.dir}/resources/ctp/server">
				<include name="ctp.*" />
			</fileset>
		</copy>
		<copy todir="${nbia-ctp.dist.dir}/CTP_Server/CTP/examples" overwrite="true">
			<fileset dir="${common.dir}/resources/ctp/server">
				<include name="example*" />
			</fileset>
		</copy>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Server/org" />
		<delete dir="${nbia-ctp.dist.dir}/CTP_Server/META-INF" />
		<delete dir="${nbia-ctp.dist.dir}/CTP_Server/config" />
		<mkdir dir="${nbia-ctp.dist.dir}/CTP_Server/CTP/logs" />
		<!-- for default index dir -->
		<mkdir dir="${nbia-ctp.dist.dir}/CTP_Server/CTP/index" />
		<osfamily property="os.type" />
		<switch value="${os.type}">
			<case value="unix">
				<property name="jai.classpath" value="${jai.linux.binaries.relative.dir}/lib/" />
				<unzip dest="${nbia-ctp.dist.dir}/CTP_Server/" src="${tools.dist.dir}/${jai.linux.binaries.file}" />
				<!--echo file="${ctp.server.home}/CTP/ctp.sh">
        <![CDATA[
#!/bin/sh
nohup java -Xmx1024m -cp xml-apis-1.0.b2.jar -Djava.ext.dirs="${jai.classpath}:$JAVA_HOME/jre/lib/ext" -jar CTP.jar &
        ]]>
        </echo-->
			</case>
			<case value="windows">
				<property name="jai.classpath" value="${jai.windows.binaries.relative.dir}/lib/" />
				<unzip dest="${nbia-ctp.dist.dir}/CTP_Server/" src="${tools.dist.dir}/${jai.windows.binaries.file}" />
				<!--property name="jai.classpath"
                  value="${ctp.server.home}/${jai.windows.binaries.relative.dir}/lib/"/>

        <echo file="${ctp.server.home}/CTP/ctp.bat">
        <![CDATA[
echo Starting CTP Server...
java -Xmx1024m -cp xml-apis-1.0.b2.jar -Djava.ext.dirs="${jai.classpath};%JAVA_HOME%/jre/lib/ext" -jar CTP.jar
        ]]>
        </echo-->
			</case>
			<default>
				<echo message="${os.type} has no match." />
			</default>
		</switch>
		<zip update="false" destfile="${nbia-ctp.dist.dir}/CTP_Server.zip">
			<zipfileset dir="${nbia-ctp.dist.dir}/CTP_Server/" />
		</zip>
		<delete dir="${nbia-ctp.dist.dir}/CTP_Server/" />
		<delete dir="${nbia-ctp.dist.dir}/FileSender" />
		<delete dir="${nbia-ctp.dist.dir}/CTP-installer.jar" />
	</target>
	<target name="build:nbia-services-commons" depends="init,
                                                      build:nbia-util,
                                                      build:nbia-services-grid,
                                                      build:nbia-dao">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-services-commons.build.target}" dir="${nbia-services-commons.base.dir}">
			<property name="project.name" value="${project.name}" />
			<!--property name="database.type" value="${database.type}"/>
      <property name="database.user" value="${database.user}"/>
      <property name="database.password" value="${database.password}"/>
      <property name="database.system.user" value="${database.system.user}"/>
      <property name="database.system.password" value="${database.system.password}"/>
      <property name="database.url" value="${database.url}"/>
      <property name="database.dialect" value="${database.dialect}"/>
      <property name="database.driver" value="${database.driver}"/-->
		</ant>
	</target>
	<target name="build:nbia-download" depends="init,
                   build:nbia-dao, build:nbia-services-commons">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-download.build.target}" dir="${nbia-download.base.dir}">
			<property name="project.name" value="${project.name}" />
		</ant>
	</target>
	<target name="build:nbia-download-manager" depends="init,
                   build:nbia-services-commons">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-download-manager.build.target}" dir="${nbia-download-manager.base.dir}">
			<property name="project.name" value="${project.name}" />
			<property name="jar-signing.keystore.location" value="${jar-signing.keystore.location}" />
			<property name="jar-signing.keystore.password" value="${jar-signing.keystore.password}" />
			<property name="jar-signing.keystore.alias" value="${jar-signing.keystore.alias}" />
			<property name="jar-signing.execution.time" value="${jar-signing.execution.time}" />
			<!-- Need absolution location, relative path would fail in sub-project since file would not exist -->
			<property name="jar-signing.keystore.abs-location" value="${jar-signing.keystore.abs-location}" />
		</ant>
	</target>
	<!-- dont call this directly.  let the ear builder call it to ensure remote search is ready -->
	<target name="-build:imagezipping-mdb" depends="init,
                   build:nbia-services-commons">
		<ant inheritAll="false" inheritRefs="false" antfile="build.xml" target="run" dir="${image-zipping-mdb.base.dir}">
			<property name="project.name" value="${project.name}" />
		</ant>
	</target>
	<target name="keygen">
		<sequential>
			<tstamp>
				<format property="install.time" pattern="yyyy-MM-dd-HH-mm-ss" />
			</tstamp>
			<if>
				<equals arg1="${jar-signing.generate-selfsigned}" arg2="true" />
				<then>
					<echo message="Generating self-signed certificate for use with jar signing." />
					<if>
						<available file="${jar-signing.keystore.location}" />
						<then>
							<move file="${jar-signing.keystore.location}" tofile="${jar-signing.keystore.location}-${install.time}" />
						</then>
					</if>
					<genkey alias="${jar-signing.keystore.alias}" storepass="${jar-signing.keystore.password}" keystore="${jar-signing.keystore.location}" validity="1825">
						<dname>
							<param name="CN" value="${jar-signing.keystore.cert.cn}" />
							<param name="OU" value="${jar-signing.keystore.cert.ou}" />
							<param name="O" value="${jar-signing.keystore.cert.o}" />
							<param name="C" value="${jar-signing.keystore.cert.c}" />
						</dname>
					</genkey>
				</then>
				<else>
					<echo message="Using existing certificate for jar signing." />
				</else>
			</if>
			<!--verify-jar-signing-keystore
				jar-signing.keystore.abs-location="${jar-signing.keystore.location}"
				jar-signing.keystore.password="${jar-signing.keystore.password}"
				jar-signing.keystore.alias="${jar-signing.keystore.alias}"
				jar-signing.keystore.cert.cn="$jar-signing.keystore.cert.cn}"
				jar-signing.keystore.cert.ou="$jar-signing.keystore.cert.ou}"
				jar-signing.keystore.cert.o="$jar-signing.keystore.cert.o}"
				jar-signing.keystore.cert.c="$jar-signing.keystore.cert.c}"
				/-->
			<sequential>
				<if>
					<available file="${jar-signing.keystore.location}" />
					<then>
						<echo message="$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" />
						<echo message="Found signing jar file at ${jar-signing.keystore.location}, validating." />
						<basename file="${jar-signing.keystore.location}" property="jar-signing.keystore.file" />
						<dirname file="${jar-signing.keystore.location}" property="jar-signing.keystore.dir" />
						<!--verify-keystore
						appserver.ssl.enable="true"
						appserver.ssl.keystore.file="${jar-signing.keystore.file}"
						appserver.ssl.keystore.dir="${jar-signing.keystore.dir}"
						appserver.ssl.keystore.pass="${jar-signing.keystore.password}"
						appserver.ssl.keystore.alias="${jar-signing.keystore.alias}"
						appserver.ssl.fullyqualified.hostname=""
						verify.url="false"
						/-->
					</then>
					<else>
						<echo message="$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" />
						<echo message="Signing jar file at${jar-signing.keystore.location} not found, skipping validation." />
					</else>
				</if>
			</sequential>
		</sequential>
	</target>
	<!-- dont call this directly.  let the ear builder call it to ensure remote search is ready -->
	<target name="-build:image-deletion-mdb" depends="init,
                   build:nbia-services-commons">
		<ant inheritAll="false" inheritRefs="false" antfile="build.xml" target="run" dir="${image-deletion-mdb.base.dir}">
			<property name="project.name" value="${project.name}" />
		</ant>
	</target>
	<!-- Build ncia-core-grid sub-project produces project level artifacts -->
	<target name="build:ncia-core-grid" depends="init,
                                               build:nbia-services-commons">
		<delete dir="${ncia-core-grid.base.dir}/build" />
		<delete dir="${ncia-core-grid.base.dir}/target" />
		<delete dir="${lib.dir}/ncia-core-grid-transfer" />
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="deployJBoss" dir="${ncia-core-grid.base.dir}">
			<property name="project.name" value="${project.name}" />
			<property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}" />
			<property name="env.JBOSS_HOME" value="${ncia-core-grid.artifact.dir}" />
		</ant>
		<!--
      this is necessary to get cagrid patched versions of wsrf core
      see: http://www.cagrid.org/display/knowledgebase/Manually+Configure+JBoss+Container
      -->
		<ant inheritAll="false" inheritRefs="false" antfile="jboss.xml" target="deployJBoss" dir="${nbia-resource.artifact.dir}/grid/jboss">
			<property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}" />
			<property name="env.JBOSS_HOME" value="${ncia-core-grid.artifact.dir}" />
			<property name="jboss.dir" value="${ncia-core-grid.artifact.dir}" />
			<!-- webapp23.dtd craps out occasionally.  this is for local xmlcatalog -->
			<property name="dtd.dir" value="${nbia-resource.artifact.dir}/grid/jboss" />
		</ant>
		<delete>
			<fileset dir="${ncia-core-grid.artifact.dir}/server/default/deploy/wsrf.war/WEB-INF/lib">
				<include name="*tests.jar" />
			</fileset>
		</delete>
		<zip update="false" destfile="${ncia-core-grid.dist.dir}/${ncia-core-grid.artifact.file}">
			<zipfileset dir="${ncia-core-grid.artifact.dir}/server/default/deploy/wsrf.war/" />
		</zip>
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="test" dir="${ncia-core-grid.base.dir}">
			<property name="project.name" value="${project.name}" />
			<property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}" />
			<property name="env.JBOSS_HOME" value="${ncia-core-grid.artifact.dir}" />
			<property name="database.type" value="${database.type}" />
			<property name="database.user" value="${database.user}" />
			<property name="database.password" value="${database.password}" />
			<property name="database.system.user" value="${database.system.user}" />
			<property name="database.system.password" value="${database.system.password}" />
			<property name="database.url" value="${database.url}" />
			<property name="database.dialect" value="${database.dialect}" />
			<property name="database.driver" value="${database.driver}" />
		</ant>
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="inspect" dir="${ncia-core-grid.base.dir}">
			<property name="project.name" value="${project.name}" />
			<property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}" />
			<property name="env.JBOSS_HOME" value="${ncia-core-grid.artifact.dir}" />
		</ant>
	</target>
	
	<target name="build:nbia-remote-search" depends="init,
                                                   build:ncia-core-grid,
                                                   build:nbia-download-manager">
		<ant inheritAll="false" inheritRefs="false" antfile="build.xml" target="run" dir="${nbia-remote-search.base.dir}" />
	</target>
	
	<target name="build:nbia-liquibase" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="run" dir="../nbia-liquibase">
			<property name="project.name" value="${project.name}" />
		</ant>
	</target>
	<target name="build:nbia-web" depends="init,
                   build:nbia-services-commons,
				   build:nbia-download-manager,
                   build:nbia-download,
                   keygen,
                   build:nbia-remote-search,
                   -build:image-deletion-mdb,
                   -build:imagezipping-mdb">
		<!-- crud.  dealing with cyclical dependencies between nbia-download-mgr and nbia-remote-search -->
		<!-- nimpy - this sucks sucks sucks -->
		<copy todir="${target.dir}/dist/exploded/nbia-download-manager">
			<fileset dir="${lib.dir}/nbia-remote-search/runtime">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${target.dir}/dist/exploded/nbia-download-manager">
			<fileset dir="${lib.dir}/nbia-download-manager/runtime">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${target.dir}/dist/exploded/nbia-download-manager">
			<fileset dir="${target.dir}/dist/exploded/nbia-remote-search">
				<include name="*.jar" />
			</fileset>
		</copy>
		<echoproperties prefix="jar-signing" />
		<if>
			<equals arg1="${jar-signing.execution.time}" arg2="build" />
			<then>
				<!--unsignjar jar="${target.dir}/dist/exploded/nbia-download-manager/bouncycastle-jdk1.3_1.25.jar"/-->
				<echo message="jar-signing.execution.time set to build, signing jars" />
				<sequential>
					<!-- Remove any existing signatures from a JAR file. -->
					<tempfile prefix="usignjar-" destdir="${java.io.tmpdir}" property="temp.file" />
					<echo message="Removing signatures from JAR: ${target.dir}/dist/exploded/nbia-download-manager/bouncycastle-jdk1.3_1.25.jar" />
					<mkdir dir="${temp.file}" />
					<unjar src="${target.dir}/dist/exploded/nbia-download-manager/bouncycastle-jdk1.3_1.25.jar" dest="${temp.file}">
						<patternset>
							<include name="**" />
							<exclude name="META-INF/*.SF" />
							<exclude name="META-INF/*.DSA" />
							<exclude name="META-INF/*.RSA" />
						</patternset>
					</unjar>
					<delete file="${target.dir}/dist/exploded/nbia-download-manager/bouncycastle-jdk1.3_1.25.jar" failonerror="true" />
					<!-- Touch it in case the file didn't have a manifest.
           Otherwise the JAR task below will fail if the manifest
           file doesn't exist. -->
					<mkdir dir="${temp.file}/META-INF" />
					<touch file="${temp.file}/META-INF/MANIFEST.MF" />
					<jar destfile="${target.dir}/dist/exploded/nbia-download-manager/bouncycastle-jdk1.3_1.25.jar" basedir="${temp.file}" includes="**" manifest="${temp.file}/META-INF/MANIFEST.MF" />
					<delete dir="${temp.file}" failonerror="true" />
				</sequential>
				<!--comma-separated-file-list directory.to.list="${target.dir}/dist/exploded/nbia-download-manager"
                                   property.name.to.set="jar-signing.jar.list"/-->
				<for param="jar">
					<path>
						<fileset dir="${target.dir}/dist/exploded/nbia-download-manager" includes="*" />
					</path>
					<sequential>
						<var name="just.jar.filename" unset="true" />
						<basename property="just.jar.filename" file="@{jar}" />
						<echo message="---------------------------------------------------------------------------------------------------------------------------" />
						<echo message="${just.jar.filename}" />
						<echo message="modifying manifest first because of Java 7 changes"/>
						<jar file="${target.dir}/dist/exploded/nbia-download-manager/${just.jar.filename}" update="true">
						            <manifest>
						            	<attribute name="Application-Name" value="NBIA Download Manager"/>
						                <attribute name="Codebase" value="${jar.manifest.secure.attribute.Codebase}"/>
						                <attribute name="Permissions" value="${jar.manifest.secure.attribute.Permissions}"/>
						                <attribute name="Application-Library-Allowable-Codebase" value="${jar.manifest.secure.attribute.Application-Library-Allowable-Codebase}"/>
						                <attribute name="Caller-Allowable-Codebase" value="${jar.manifest.secure.attribute.Caller-Allowable-Codebase}"/>
						                <attribute name="Trusted-Only" value="${jar.manifest.secure.attribute.Trusted-Only}"/>
						                <attribute name="Trusted-Library" value="${jar.manifest.secure.attribute.Trusted-Library}"/>
						            </manifest>
        					</jar>						
						<signjar destDir="${target.dir}/dist/exploded/nbia-download-manager" alias="${jar-signing.keystore.alias}" keystore="${jar-signing.keystore.location}" storepass="${jar-signing.keystore.password}" keypass="${jar-signing.keystore.password}" lazy="true">
							<path>
								<fileset dir="${target.dir}/dist/exploded/nbia-download-manager" includes="${just.jar.filename}" />
							</path>
						</signjar>
					</sequential>
				</for>
				<!--sign-jars jars.dir="${target.dir}/dist/exploded/nbia-download-manager"/-->
			</then>
			<else>
				<echo message="jar-signing.execution.time not set to build, not signing jars" />
			</else>
		</if>
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="${nbia-web.build.target}" dir="${nbia-web.base.dir}">
			<property name="project.name" value="${project.name}" />
			<property name="nbia.version" value="${nbia.version}" />
			<property name="nbia_prod_build_tag.final" value="${nbia_prod_build_tag.final}" />
		</ant>
	</target>
	
	<target name="-branding">
	<!-- Clean up working area -->
    <delete dir="${target.dir}/temp/nbia-ear"/>
    <delete dir="${target.dir}/temp/nbia-war"/>
    <!-- Make working directories -->
    <mkdir dir="${target.dir}/temp/nbia-ear"/>
    <mkdir dir="${target.dir}/temp/nbia-war"/>
    
    <!-- Extract required archives -->
    <unzip src="${nbia-web.dist.dir}/nbia.ear" dest="${target.dir}/temp/nbia-ear"/>
    <unzip src="${target.dir}/temp/nbia-ear/nbia.war" dest="${target.dir}/temp/nbia-war"/>
    <property name="webapp.dir.path" value="${target.dir}/temp/nbia-war" />
    
    <sequential>
      <!--   add cancer center logo header if necessary -->
      <if>
        <or>
          <not>
            <isset property="cancer.center.logo"/>
          </not>
          <equals arg1="${common.resources.dir}/branding/${cancer.center.logo}" arg2=""/>
        </or>
        <then>
          <echo>No Cancer Center logo specified.  Substituting CCLOGO with empty string.</echo>
        </then>
        <else>
          <basename property="cc.logo.filename" file="${common.resources.dir}/branding/${cancer.center.logo}"/>
          <copy file="${common.resources.dir}/branding/${cancer.center.logo}" tofile="${webapp.dir.path}/images/${cc.logo.filename}" />
          <!-- in case no background image provided -->
          <if>
            <or>
              <not>
                <isset property="cancer.center.background" />
              </not>
              <equals arg1="${common.resources.dir}/branding/${cancer.center.background}" arg2=""/>
            </or>
            <then>
              <property name="cancer.center.background" value="whitebg.jpg" />
              <basename property="cc.bgimage.filename" file="${common.resources.dir}/branding/${cancer.center.background}"/>
            </then>
            <else>
              <basename property="cc.bgimage.filename" file="${common.resources.dir}/branding/${cancer.center.background}"/>
              <copy file="${common.resources.dir}/branding/${cancer.center.background}"
                    tofile="${webapp.dir.path}/images/${cc.bgimage.filename}" />
            </else>
          </if>

          <basename property="cc.bgimage.filename" file="${common.resources.dir}/branding/${cancer.center.background}"/>
          <loadfile property="cc.logo.header"
                    srcFile="${webapp.dir.path}/WEB-INF/facelets/layout/ccHeader.xhtml">
            <filterchain>
              <expandproperties/>
             </filterchain>
          </loadfile>


          <echo file="${webapp.dir.path}/WEB-INF/facelets/layout/nciHeader.xhtml" append="false">${cc.logo.header}</echo>
        </else>
      </if>
      <!-- end of external cancer center logo header  -->

      <if>

        <and>
          <not>
            <equals arg1="${common.resources.dir}/branding/${branding.left.submenu.quicklinks.path}" arg2=""/>
          </not>
          <isset property="branding.left.submenu.quicklinks.path"/>
        </and>

        <then>
          <copy file="${common.resources.dir}/branding/${branding.left.submenu.quicklinks.path}"
                tofile="${webapp.dir.path}/WEB-INF/facelets/layout/quickLinks.xhtml"
                overwrite="true"/>
        </then>
      </if>

      <if>

        <and>
          <not>
            <equals arg1="${common.resources.dir}/branding/${branding.welcome.image.path}" arg2=""/>
          </not>
          <isset property="branding.welcome.image.path"/>
        </and>

        <then>
          <copy file="${common.resources.dir}/branding/${branding.welcome.image.path}"
                tofile="${webapp.dir.path}/images/bannerHome.gif"
                overwrite="true"/>
        </then>
      </if>

      <if>

        <and>
          <not>
            <equals arg1="${common.resources.dir}/branding/${branding.welcome.text.path}" arg2=""/>
          </not>
          <isset property="branding.welcome.text.path"/>
        </and>
        <then>
          <copy file="${common.resources.dir}/branding/${branding.welcome.text.path}"
                tofile="${webapp.dir.path}/WEB-INF/facelets/welcomeText.xhtml"
                overwrite="true"/>
        </then>
      </if>

      <if>

        <and>
          <not>
            <equals arg1="${common.resources.dir}/branding/${branding.welcome.title.path}" arg2=""/>
          </not>
          <isset property="branding.welcome.title.path"/>
        </and>
        <then>
          <copy file="${common.resources.dir}/branding/${branding.welcome.title.path}"
                tofile="${webapp.dir.path}/WEB-INF/facelets/welcomeTitle.xhtml"
                overwrite="true"/>
        </then>
      </if>

      <if>
        <and>
          <not>
            <equals arg1="${branding.applogo.visible}" arg2=""/>
          </not>
          <isset property="branding.applogo.visible"/>
        </and>
        <then>
          <if>
            <equals arg1="${branding.applogo.visible}" arg2="no"/>
            <then>
              <copy file="${webapp.dir.path}/WEB-INF/facelets/layout/empty.xhtml"
                    tofile="${webapp.dir.path}/WEB-INF/facelets/layout/appHeader.xhtml"
                    overwrite="true"/>
            </then>
            <else>
              <copy file="${branding.applogo.path}"
                    tofile="${webapp.dir.path}/images/Logo-NCIA.jpg"
                    overwrite="true"/>
            </else>
          </if>
        </then>
      </if>

      <if>
        <and>
          <not>
            <equals arg1="${branding.footer.path}" arg2=""/>
          </not>
          <isset property="branding.footer.path"/>
        </and>
        <then>
          <copy file="${branding.footer.path}"
                tofile="${webapp.dir.path}/WEB-INF/facelets/layout/appFooter.xhtml"
                overwrite="true"/>
        </then>
      </if>
    </sequential>
    
    <war destfile="${target.dir}/temp/nbia-ear/nbia.war"
         compress="false" update="true"
         webxml="${target.dir}/temp/nbia-war/WEB-INF/web.xml" >
      <fileset dir="${target.dir}/temp/nbia-war">
        <include name="*/**" />
      </fileset>
    </war>

    <ear compress="false" update="true"
         destfile="${nbia-web.dist.dir}/nbia.ear"
         appxml="${target.dir}/temp/nbia-ear/META-INF/application.xml">

      <fileset dir="${target.dir}/temp/nbia-ear">
        <include name="*/**" />
      </fileset>
    </ear>
   	</target>
	
	<!--target name="build:nbia-grid" depends="init, build:ncia-core-grid"-->
	<target name="build:nbia-grid" depends="init">
		<delete dir="${nbia-grid.base.dir}/build" />
		<delete dir="${nbia-grid.base.dir}/target" />
		<delete dir="${lib.dir}/nbia-service" />
		<ant inheritAll="false" inheritRefs="false" antfile="${nbia.build.file}" target="deployJBoss" dir="${nbia-grid.base.dir}">
			<property name="project.name" value="${project.name}" />
			<property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}" />
			<property name="env.JBOSS_HOME" value="${nbia-grid.artifact.dir}" />
		</ant>
		<!--
      this is necessary to get cagrid patched versions of wsrf core
      see: http://www.cagrid.org/display/knowledgebase/Manually+Configure+JBoss+Container
      -->
		<ant inheritAll="false" inheritRefs="false" antfile="jboss.xml" target="deployJBoss" dir="${nbia-resource.artifact.dir}/grid/jboss">
			<property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}" />
			<property name="env.JBOSS_HOME" value="${nbia-grid.artifact.dir}" />
			<property name="jboss.dir" value="${nbia-grid.artifact.dir}" />
			<!-- webapp23.dtd craps out occasionally.  this is for local xmlcatalog -->
			<property name="dtd.dir" value="${nbia-resource.artifact.dir}/grid/jboss" />
		</ant>
		<delete>
			<fileset dir="${nbia-grid.artifact.dir}/server/default/deploy/wsrf.war/WEB-INF/lib">
				<include name="*tests.jar" />
			</fileset>
		</delete>
		<zip update="false" destfile="${nbia-grid.dist.dir}/${nbia-grid.artifact.file}">
			<zipfileset dir="${nbia-grid.artifact.dir}/server/default/deploy/wsrf.war/" />
		</zip>
	</target>
	<target name="dist:tools:retrieve:sync-gts">
		<if>
			<not>
				<available file="${download.dir}/${sync-gts.binaries.file}" />
			</not>
			<then>
				<get src="${sync-gts.src.url}" dest="${download.dir}/${sync-gts.binaries.file}" />
			</then>
		</if>
		<property name="sync-gts.dist.dir" location="${dist.exploded.dir}/${sync-gts.dist.relative.dir}" />
		<unzip src="${download.dir}/${sync-gts.binaries.file}" dest="${sync-gts.dist.dir}" />
		<mkdir dir="${cagrid.target.co.dir}" />
		<if>
			<not>
				<available file="${cagrid-target.src.url}" />
			</not>
			<then>
				<mkdir dir="${cagrid.target.co.dir}" />
				<svn username="anonymous" password="" javahl="false" svnkit="true">
					<checkout url="${cagrid-target.src.url}" destPath="${cagrid.target.co.dir}" />
				</svn>
			</then>
		</if>
		<copy todir="${sync-gts.dist.dir}/cagrid-target">
			<fileset dir="${cagrid.target.co.dir}" />
		</copy>
	</target>
	
	<!--- build Secured nciaCoreGrid -->
	<target name="build:nbia-secure-grid" depends="build:ncia-core-grid, dist:tools:retrieve:sync-gts">
		<!--copy file="ncia-core-grid.xml" 
          todir="../target/dist/exploded"/>
    <copy file="../target/dist/exploded/ncia-ear/ncia.ear" 
          todir="${application.base.path.windows}/jboss-4.0.5.ga/server/${jboss.server.name}/deploy"/>          
        <copy todir="${dist.exploded.dir}/ncia-core-grid-transfer" overwrite="true">
          <fileset dir="${software.dir}/ncia-core-grid-transfer/conf">
            <include name="**/*"/>
          </fileset>
        </copy>           
    <exec osfamily="windows" executable="ant.bat" dir="../target/dist/exploded" failonerror="true">  
      <arg line="install:ncia-core-grid:ncm"/>
    </exec-->
		<property name="grid.deploy.dir" location="${target.dir}/dist/exploded/nbia-core-grid" />
		<property name="wsrf.path" location="${grid.deploy.dir}/wsrf/wsrf.war" />
		<mkdir dir="${wsrf.path}" />
		<mkdir dir="${grid.deploy.dir}/lib" />
		<unzip dest="${wsrf.path}" src="${common.resources.dir}/grid/tomcat-globus-wsrf.zip" />
		<unzip dest="${wsrf.path}" src="${ncia-core-grid.dist.dir}/NciaCoreService.zip" />
		<!-- CP15 complains about commons-logging in war file? -->
		<delete>
			<fileset dir="${wsrf.path}/WEB-INF/lib" includes="commons-logging*.jar" />
		</delete>
		<patternset id="secure.globus.jars">
			<include name="cog-jglobus.jar" />
			<include name="cog-tomcat.jar" />
			<include name="cryptix32.jar" />
			<include name="cryptix.jar" />
			<include name="cryptix-asn1.jar" />
			<include name="jce-jdk13-125.jar" />
			<include name="jgss.jar" />
			<include name="puretls.jar" />
		</patternset>
		<copy todir="${grid.deploy.dir}/lib">
			<fileset dir="${wsrf.path}/WEB-INF/lib">
				<patternset refid="secure.globus.jars" />
			</fileset>
		</copy>
		<delete>
			<fileset dir="${wsrf.path}/WEB-INF/lib">
				<patternset refid="secure.globus.jars" />
			</fileset>
		</delete>
		<!-- wsrf opened up for more configuration changes -->
		<property name="caGridTransfer.war.path" location="${grid.deploy.dir}/caGridTransfer/caGridTransfer.war" />
		<delete dir="${caGridTransfer.war.path}" />
		<unzip dest="${grid.deploy.dir}/caGridTransfer" src="${common.resources.dir}/grid/caGridTransfer.zip" />
		<replaceregexp file="${caGridTransfer.war.path}/WEB-INF/classes/server.properties" byline="true" match="^\s*transfer.service.persistence.relative.location\s*=(.*)$" replace="transfer.service.persistence.relative.location=wsrf.war/WEB-INF/etc/cagrid_TransferService/persisted/TransferServiceContextResourceProperties" />
		<delete>
			<fileset dir="${caGridTransfer.war.path}/WEB-INF/lib">
				<include name="log4j*.jar" />
				<include name="commons-logging*.jar" />
			</fileset>
		</delete>
		<unzip dest="${wsrf.path}" src="${common.resources.dir}/grid/caGridTransfer-wsrf.zip" />
		<!-- opened up caGridTransfer-wsrf.zip  -->
		<if>
			<equals arg1="${ncia-core-grid.tempZipLocation}" arg2="" />
			<then>
				<var name="ncia-core-grid.tempZipLocation" value="${java.io.tmpdir}/tempzip/" />
			</then>
		</if>
		<copy file="${common.resources.dir}/grid/NCIACoreService_registration.xml" todir="${wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/">
			<filterset>
				<filter token="grid.index.url" value="${grid.index.url}" />
			</filterset>
		</copy>
		<copy file="${common.resources.dir}/grid/log4j.properties" todir="${wsrf.path}/WEB-INF/classes" overwrite="true" />
		<copy file="${common.resources.dir}/grid/NCIA.csm.new.hibernate.cfg.xml" todir="${wsrf.path}/WEB-INF/classes">
			<filterset>
				<filter token="database.dialect" value="${database.dialect}" />
				<filter token="database.driver" value="${database.driver}" />
			</filterset>
		</copy>
		<!-- done application -->
		<echo message="Cleaning up hostname:port refereces in **/*.wsdl" />
		<replace dir="${wsrf.path}" token="http://localhost:8080" value="https://${ncia-core-grid-secure.jboss.server.hostname}:${ncia-core-grid-secure.jboss.server.port}">
			<include name="**/*.wsdl" />
		</replace>
		<!-- Fix default jndi-config -->
		<echo message="Fixing grid jndi-config" />
		<replace file="${wsrf.path}/WEB-INF/etc/globus_resolution_service/jndi-config.xml" token="http://localhost:8080" value="https://${ncia-core-grid-secure.jboss.server.hostname}:${ncia-core-grid-secure.jboss.server.port}" />
		<!-- fix web.xml -->
		<echo message="Updating grid web.xml" />
		<copy file="${common.resources.dir}/grid/web.xml" todir="${wsrf.path}/WEB-INF/" overwrite="true">
			<filterset>
				<filter token="ncia-core-grid-secure.jboss.server.port" value="${ncia-core-grid-secure.jboss.server.port}" />
			</filterset>
		</copy>
		<replace file="${wsrf.path}/WEB-INF/web.xml" token="&lt;param-value&gt;http" value="&lt;param-value&gt;https" />
		<!-- Secure Grid configuraiotns -->
		<copy file="${common.resources.dir}/grid/global_security_descriptor.xml" todir="${wsrf.path}/WEB-INF/etc/globus_wsrf_core/" overwrite="true">
			<filterset>
				<filter token="ncia-core-grid.jboss.home" value="${ncia-core-grid.jboss.home}" />
				<filter token="jboss.server.name" value="${ncia-core-grid-secure.jboss.server.name}" />
				<filter token="key_file" value="${ncia-core-grid-secure.jboss.key_file}" />
				<filter token="cer_file" value="${ncia-core-grid-secure.jboss.cer_file}" />
			</filterset>
		</copy>
		
		<xmltask preservetype="true" source="${wsrf.path}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" dest="${wsrf.path}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd">
						<remove path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='parameter' and @name='logicalHost']" />
						<remove path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='parameter' and @name='publishHostName']" />
						<remove path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='parameter' and @name='containerSecDesc']" />
						<remove path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='requestFlow']/*[local-name()='handler' and @type='java:org.globus.wsrf.impl.security.authentication.transport.TomcatTransportSecurityHandler']" />
					</xmltask>
					<xmltask preservetype="true" source="${wsrf.path}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" dest="${wsrf.path}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" failWithoutMatch="true">
						<insert path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']">
							<![CDATA[
							<parameter xmlns="http://xml.apache.org/axis/wsdd/"
								name="logicalHost"
								value="${grid.external.secure.host}"/>
							<parameter xmlns="http://xml.apache.org/axis/wsdd/"
										name="publishHostName"
								value="true"/>
							<parameter xmlns="http://xml.apache.org/axis/wsdd/"
								name="disableDNS"
										value="true"/>
							]]>
						</insert>
						<insert path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']">
							<![CDATA[
							<parameter xmlns="http://xml.apache.org/axis/wsdd/"
								name="containerSecDesc"								value="${ncia-core-grid.jboss.home}/server/${ncia-core-grid-secure.jboss.server.name}/deploy/wsrf.war/WEB-INF/etc/globus_wsrf_core/global_security_descriptor.xml"/>
							]]>
						</insert>
						<insert path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='requestFlow']/*[local-name()='handler' and @type='java:org.globus.wsrf.handlers.URLMapper']"
							position="after">
							<![CDATA[
							<handler type="java:org.globus.wsrf.impl.security.authentication.transport.TomcatTransportSecurityHandler"
								xmlns="http://xml.apache.org/axis/wsdd/"/>
							]]>
						</insert>
						
					</xmltask>
		
		
		<!--copy file="${common.resources.dir}/grid/server-config.wsdd" todir="${wsrf.path}/WEB-INF/etc/globus_wsrf_core/" overwrite="true">
			<filterset>
				<filter token="grid.external.secure.host" value="${grid.external.secure.host}" />
				<filter token="ncia-core-grid.jboss.home" value="${ncia-core-grid.jboss.home}" />
				<filter token="jboss.server.name" value="${ncia-core-grid-secure.jboss.server.name}" />
			</filterset>
		</copy-->
		
		<!--	Change POC Info in	/server/ncicb-app39380/deploy/wsrf.war/WEB-INF/etc/cagrid_NBIAService/serviceMetadata.xml  -->
		<echo message="Updateing POC info  at ${wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/serviceMetadata.xml" />
		<var name="poc.science.string" value=" affiliation=&quot;${grid.poc.science.affiliation}&quot; email=&quot;${grid.poc.science.email}&quot; firstName=&quot;${grid.poc.science.name.first}&quot; lastName=&quot;${grid.poc.science.name.last}&quot; phoneNumber=&quot;${grid.poc.science.phone}&quot; role=&quot;${grid.poc.science.role}&quot; " />
		<replaceregexp file="${wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/serviceMetadata.xml" match="^(\s+&lt;ns3:PointOfContact).*(xmlns:ns3.*&gt;)" replace="\1${poc.science.string}\2" flags="g" byline="true" />
		<!-- Research Center info -->
		<var name="research.center.lines" unset="true" />
		<loadfile property="research.center.lines" srcFile="${wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/serviceMetadata.xml">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern=":ResearchCenter" />
				</linecontainsregexp>
			</filterchain>
		</loadfile>
		<var name="ns.name" unset="true" />
		<propertyregex property="ns.name" input="${research.center.lines}" regexp="^\s*&lt;(.*?):ResearchCenter" select="\1" />
		<echo message="Read namespace from :ResearchCenter as ${ns.name}" />
		<var name="poc.tech.string" value="${line.separator}
&lt;${ns.name}:ResearchCenter displayName=&quot;${grid.poc.tech.researchCenter.displayname}&quot; shortName=&quot;${grid.poc.tech.researchCenter.shortname}&quot; xmlns:${ns.name}=&quot;gme://caGrid.caBIG/1.0/gov.nih.nci.cagrid.metadata.common&quot;&gt;${line.separator}
&lt;${ns.name}:Address country=&quot;${grid.poc.tech.addr.country}&quot; locality=&quot;${grid.poc.tech.addr.locality}&quot; postalCode=&quot;${grid.poc.tech.addr.postalCode}&quot; stateProvince=&quot;${grid.poc.tech.addr.stateProvince}&quot; street1=&quot;${grid.poc.tech.addr.street1}&quot; street2=&quot;${grid.poc.tech.addr.street2}&quot;/&gt;${line.separator}
&lt;${ns.name}:pointOfContactCollection&gt;${line.separator}
&lt;${ns.name}:PointOfContact affiliation=&quot;${grid.poc.tech.affiliation}&quot; email=&quot;${grid.poc.tech.email}&quot; firstName=&quot;${grid.poc.tech.name.first}&quot; lastName=&quot;${grid.poc.tech.name.last}&quot; phoneNumber=&quot;${grid.poc.tech.phone}&quot; role=&quot;${grid.poc.tech.role}&quot;/&gt;${line.separator}
&lt;/${ns.name}:pointOfContactCollection&gt;${line.separator}
&lt;/${ns.name}:ResearchCenter&gt;${line.separator}
" />
		<replaceregexp file="${wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/serviceMetadata.xml" match="&lt;ns1:hostingResearchCenter&gt;.*&lt;\/ns1:hostingResearchCenter&gt;" replace="&lt;ns1:hostingResearchCenter&gt;${poc.tech.string}&lt;\/ns1:hostingResearchCenter&gt;" flags="sg" />
		<echo message="Updating poll interval grid registration.xml" />
		<replaceregexp match="(&lt;agg:PollIntervalMillis&gt;).*(&lt;\/agg:PollIntervalMillis&gt;)" replace="\13600000\2" flags="sg">
			<fileset dir="${wsrf.path}/WEB-INF/etc">
				<include name="**/*_registration.xml" />
			</fileset>
		</replaceregexp>
		<!-- Change pointer to index service based on property -->
		<echo message="Updating grid.index.url - ${grid.index.url}" />
		<replaceregexp match="(&lt;wsa:Address&gt;).*(&lt;\/wsa:Address&gt;)" replace="\1${grid.index.url}\2" flags="sg">
			<fileset dir="${wsrf.path}/WEB-INF/etc">
				<include name="**/*_registration.xml" />
			</fileset>
		</replaceregexp>
		<xmltask source="${wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/jndi-config.xml" dest="${wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/jndi-config.xml">
			<!-- no xmlcatalog necessary -->
			<replace path="//:parameter[:name='databaseConnectionUrl']/:value/text()" withtext="${database.url}" />
			<replace path="//:parameter[:name='thumbnailUrl']/:value/text()" withtext="${ncia-core-grid.jboss.thumbnailUrl}" />
			<replace path="//:resource[@name='nciaDatabase']//:parameter[:name='driverClass']/:value/text()" withtext="${database.driver}" />
			<replace path="//:resource[@name='nciaDatabase']//:parameter[:name='jdbcUrl']/:value/text()" withtext="${database.url}" />
			<replace path="//:resource[@name='nciaDatabase']//:parameter[:name='user']/:value/text()" withtext="${database.user}" />
			<replace path="//:resource[@name='nciaDatabase']//:parameter[:name='password']/:value/text()" withtext="${database.password}" />
			<replace path="//:parameter[:name='tempZipLocation']/:value/text()" withtext="${ncia-core-grid.tempZipLocation}" />
		</xmltask>
		<!-- patch commons to use JNDI name that is globus friendly -->
		<mkdir dir="${wsrf.path}/WEB-INF/lib/tmp" />
		<unjar src="${wsrf.path}/WEB-INF/lib/nbia-dao.jar" dest="${wsrf.path}/WEB-INF/lib/tmp" />
		<delete file="${wsrf.path}/WEB-INF/lib/nbia-dao.jar" />
		<replaceregexp file="${wsrf.path}/WEB-INF/lib/tmp/hibernate.properties" byline="true" match="^\s*hibernate.connection.datasource\s\s*(.*)$" replace="hibernate.connection.datasource java:comp/env/nciaDatabase" />
		<replaceregexp file="${wsrf.path}/WEB-INF/lib/tmp/hibernate.properties" byline="true" match="^\s*hibernate.connection.driver_class\s\s*(.*)$" replace="hibernate.connection.driver_class ${database.driver}" />
		<replaceregexp file="${wsrf.path}/WEB-INF/lib/tmp/hibernate.properties" byline="true" match="^\s*hibernate.dialect\s\s*(.*)$" replace="hibernate.dialect ${database.dialect}" />
		<!--copy  file="${common.resources.dir}/grid/NCIA.csm.new.hibernate.cfg.xml" todir="${wsrf.path}/WEB-INF/lib/tmp/" overwrite="true">
     	 <filterset>
				<filter token="database.dialect" value="${database.dialect}"/>
				<filter token="database.driver" value="${database.driver}"/>
			</filterset>              
</copy-->
		<xmltask source="${wsrf.path}/WEB-INF/lib/tmp/NCIA.csm.new.hibernate.cfg.xml" dest="${wsrf.path}/WEB-INF/lib/tmp/NCIA.csm.new.hibernate.cfg.xml" preservetype="true">
			<!--xmlcatalog refid="bda.xml.catalog"/-->
			<replace path="//property[@name='connection.datasource']/text()" withtext="java:comp/env/nciaDatabase" />
			<replace path="//property[@name='dialect']/text()" withtext="${database.dialect}" />
			<replace path="//property[@name='connection.driver_class']/text()" withtext="${database.driver}" />
		</xmltask>
		<jar jarfile="${wsrf.path}//WEB-INF/lib/nbia-dao.jar" compress="false">
			<fileset dir="${wsrf.path}/WEB-INF/lib/tmp">
				<include name="*/**" />
			</fileset>
		</jar>
		<delete dir="${wsrf.path}/WEB-INF/lib/tmp" />
		<mkdir dir="${wsrf.path}/WEB-INF/lib/tmp" />
		<unjar src="${wsrf.path}/WEB-INF/lib/ncia-orm.jar" dest="${wsrf.path}/WEB-INF/lib/tmp" />
		<delete file="${wsrf.path}/WEB-INF/lib/ncia-orm.jar" />
		<xmltask source="${wsrf.path}/WEB-INF/lib/tmp/hibernate.cfg.xml" dest="${wsrf.path}/WEB-INF/lib/tmp/hibernate.cfg.xml" preservetype="true">
			<replace path="//property[@name='dialect']/text()" withtext="${database.dialect}" />
		</xmltask>
		<jar jarfile="${wsrf.path}/WEB-INF/lib/ncia-orm.jar" compress="false">
			<fileset dir="${wsrf.path}/WEB-INF/lib/tmp">
				<include name="*/**" />
			</fileset>
		</jar>
		<delete dir="${wsrf.path}/WEB-INF/lib/tmp" />
		<copy file="${common.resources.dir}/grid/resolution_port_type.wsdl" todir="${wsrf.path}/share/schema/resolutionService/" overwrite="true" />
		<zip update="false" destfile="${grid.deploy.dir}/wsrf.zip">
			<zipfileset dir="${grid.deploy.dir}/wsrf" />
		</zip>
		<zip update="false" destfile="${grid.deploy.dir}/caGridTransfer.zip">
			<zipfileset dir="${grid.deploy.dir}/caGridTransfer" />
		</zip>
		<copy file="${common.resources.dir}/grid/properties-service.xml" todir="${grid.deploy.dir}" overwrite="true">
		</copy>
		<delete dir="${grid.deploy.dir}/wsrf" />
		<delete dir="${grid.deploy.dir}/caGridTransfer" />
		<!-- install sync-gts in support of Secure Grid being enabled  see macro "appserver-install-sync-gts" -->
	</target>
	<!-- ############################ nbia-core-grid-unsecured#################### -->
	
	<target name="build:nbia-unsecure-grid" depends="build:ncia-core-grid">
		<property name="unsecure.grid.deploy.dir" location="${target.dir}/dist/exploded/nbia-core-grid-unsecured" />
		<property name="unsecure.wsrf.path" location="${unsecure.grid.deploy.dir}/wsrf/wsrf.war" />
		<mkdir dir="${unsecure.wsrf.path}" />
		<mkdir dir="${unsecure.grid.deploy.dir}/lib" />
		<unzip dest="${unsecure.wsrf.path}" src="${common.resources.dir}/grid/tomcat-globus-wsrf.zip" />
		<unzip dest="${unsecure.wsrf.path}" src="${ncia-core-grid.dist.dir}/NciaCoreService.zip" />
		<!-- CP15 complains about commons-logging in war file? -->
		<delete>
			<fileset dir="${unsecure.wsrf.path}/WEB-INF/lib" includes="commons-logging*.jar" />
		</delete>
		<!-- wsrf opened up for more configuration changes -->
		<property name="unsecure.caGridTransfer.war.path" location="${unsecure.grid.deploy.dir}/caGridTransfer/caGridTransfer.war" />
		<delete dir="${unsecure.caGridTransfer.war.path}" />
		<unzip dest="${unsecure.grid.deploy.dir}/caGridTransfer" src="${common.resources.dir}/grid/caGridTransfer.zip" />
		<replaceregexp file="${unsecure.caGridTransfer.war.path}/WEB-INF/classes/server.properties" byline="true" match="^\s*transfer.service.persistence.relative.location\s*=(.*)$" replace="transfer.service.persistence.relative.location=wsrf.war/WEB-INF/etc/cagrid_TransferService/persisted/TransferServiceContextResourceProperties" />
		<delete>
			<fileset dir="${unsecure.caGridTransfer.war.path}/WEB-INF/lib">
				<include name="log4j*.jar" />
				<include name="commons-logging*.jar" />
			</fileset>
		</delete>
		<unzip dest="${unsecure.wsrf.path}" src="${common.resources.dir}/grid/caGridTransfer-wsrf.zip" />
		<!-- opened up caGridTransfer-wsrf.zip  -->
		<if>
			<equals arg1="${ncia-core-grid-unsecured.tempZipLocation}" arg2="" />
			<then>
				<var name="ncia-core-grid-unsecured.tempZipLocation" value="${java.io.tmpdir}/tempzip/" />
			</then>
		</if>
		<copy file="${common.resources.dir}/grid/NCIACoreService_registration.xml" todir="${unsecure.wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/">
			<filterset>
				<filter token="grid.index.url" value="${grid.index.url}" />
			</filterset>
		</copy>
		<copy file="${common.resources.dir}/grid/log4j.properties" todir="${unsecure.wsrf.path}/WEB-INF/classes" overwrite="true" />
		<copy file="${common.resources.dir}/grid/NCIA.csm.new.hibernate.cfg.xml" todir="${unsecure.wsrf.path}/WEB-INF/classes">
			<filterset>
				<filter token="database.dialect" value="${database.dialect}" />
				<filter token="database.driver" value="${database.driver}" />
			</filterset>
		</copy>
		<!-- done application -->
		<echo message="Cleaning up hostname:port refereces in **/*.wsdl" />
		<replace dir="${unsecure.wsrf.path}" token="http://localhost:8080" value="http://${ncia-core-grid-secure.jboss.server.hostname}:${ncia-core-grid-unsecure.jboss.server.port}">
			<include name="**/*.wsdl" />
		</replace>
		<!-- Fix default jndi-config -->
		<echo message="Fixing grid jndi-config" />
		<replace file="${unsecure.wsrf.path}/WEB-INF/etc/globus_resolution_service/jndi-config.xml" token="http://localhost:8080" value="http://${ncia-core-grid-secure.jboss.server.hostname}:${ncia-core-grid-unsecure.jboss.server.port}" />
		<!-- fix web.xml -->
		<echo message="Updating grid web.xml" />
		<copy file="${common.resources.dir}/grid/web.xml" todir="${unsecure.wsrf.path}/WEB-INF/" overwrite="true">
			<filterset>
				<filter token="ncia-core-grid-secure.jboss.server.port" value="${ncia-core-grid-unsecure.jboss.server.port}" />
			</filterset>
		</copy>
		<xmltask preservetype="true" source="${unsecure.wsrf.path}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" dest="${unsecure.wsrf.path}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd">
						<remove path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='parameter' and @name='logicalHost']" />
						<remove path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='parameter' and @name='publishHostName']" />
					</xmltask>
					<xmltask preservetype="true" source="${unsecure.wsrf.path}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" dest="${unsecure.wsrf.path}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" failWithoutMatch="true">
						<insert path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']">
							<![CDATA[
							<parameter xmlns="http://xml.apache.org/axis/wsdd/"
								name="logicalHost"
								value="${grid.external.unsecure.host}"/>
							<parameter xmlns="http://xml.apache.org/axis/wsdd/"
										name="publishHostName"
								value="true"/>
							<parameter xmlns="http://xml.apache.org/axis/wsdd/"
								name="disableDNS"
										value="true"/>
							]]>
						</insert>
					</xmltask>
		
		<!--	Change POC Info in	/server/ncicb-app39380/deploy/wsrf.war/WEB-INF/etc/cagrid_NBIAService/serviceMetadata.xml  ???-->
		<echo message="Updateing POC info  at ${unsecure.wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/serviceMetadata.xml" />
		<var name="poc.science.string" value=" affiliation=&quot;${grid.poc.science.affiliation}&quot; email=&quot;${grid.poc.science.email}&quot; firstName=&quot;${grid.poc.science.name.first}&quot; lastName=&quot;${grid.poc.science.name.last}&quot; phoneNumber=&quot;${grid.poc.science.phone}&quot; role=&quot;${grid.poc.science.role}&quot; " />
		<replaceregexp file="${unsecure.wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/serviceMetadata.xml" match="^(\s+&lt;ns3:PointOfContact).*(xmlns:ns3.*&gt;)" replace="\1${poc.science.string}\2" flags="g" byline="true" />
		<!-- Research Center info -->
		<var name="research.center.lines" unset="true" />
		<loadfile property="research.center.lines" srcFile="${unsecure.wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/serviceMetadata.xml">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern=":ResearchCenter" />
				</linecontainsregexp>
			</filterchain>
		</loadfile>
		<var name="ns.name" unset="true" />
		<propertyregex property="ns.name" input="${research.center.lines}" regexp="^\s*&lt;(.*?):ResearchCenter" select="\1" />
		<echo message="Read namespace from :ResearchCenter as ${ns.name}" />
		<var name="poc.tech.string" value="${line.separator}
&lt;${ns.name}:ResearchCenter displayName=&quot;${grid.poc.tech.researchCenter.displayname}&quot; shortName=&quot;${grid.poc.tech.researchCenter.shortname}&quot; xmlns:${ns.name}=&quot;gme://caGrid.caBIG/1.0/gov.nih.nci.cagrid.metadata.common&quot;&gt;${line.separator}
&lt;${ns.name}:Address country=&quot;${grid.poc.tech.addr.country}&quot; locality=&quot;${grid.poc.tech.addr.locality}&quot; postalCode=&quot;${grid.poc.tech.addr.postalCode}&quot; stateProvince=&quot;${grid.poc.tech.addr.stateProvince}&quot; street1=&quot;${grid.poc.tech.addr.street1}&quot; street2=&quot;${grid.poc.tech.addr.street2}&quot;/&gt;${line.separator}
&lt;${ns.name}:pointOfContactCollection&gt;${line.separator}
&lt;${ns.name}:PointOfContact affiliation=&quot;${grid.poc.tech.affiliation}&quot; email=&quot;${grid.poc.tech.email}&quot; firstName=&quot;${grid.poc.tech.name.first}&quot; lastName=&quot;${grid.poc.tech.name.last}&quot; phoneNumber=&quot;${grid.poc.tech.phone}&quot; role=&quot;${grid.poc.tech.role}&quot;/&gt;${line.separator}
&lt;/${ns.name}:pointOfContactCollection&gt;${line.separator}
&lt;/${ns.name}:ResearchCenter&gt;${line.separator}
" />
		<replaceregexp file="${unsecure.wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/serviceMetadata.xml" match="&lt;ns1:hostingResearchCenter&gt;.*&lt;\/ns1:hostingResearchCenter&gt;" replace="&lt;ns1:hostingResearchCenter&gt;${poc.tech.string}&lt;\/ns1:hostingResearchCenter&gt;" flags="sg" />
		<echo message="Updating poll interval grid registration.xml" />
		<replaceregexp match="(&lt;agg:PollIntervalMillis&gt;).*(&lt;\/agg:PollIntervalMillis&gt;)" replace="\13600000\2" flags="sg">
			<fileset dir="${unsecure.wsrf.path}/WEB-INF/etc">
				<include name="**/*_registration.xml" />
			</fileset>
		</replaceregexp>
		<!-- Change pointer to index service based on property -->
		<echo message="Updating grid.index.url - ${grid.index.url}" />
		<replaceregexp match="(&lt;wsa:Address&gt;).*(&lt;\/wsa:Address&gt;)" replace="\1${grid.index.url}\2" flags="sg">
			<fileset dir="${unsecure.wsrf.path}/WEB-INF/etc">
				<include name="**/*_registration.xml" />
			</fileset>
		</replaceregexp>
		<xmltask source="${unsecure.wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/jndi-config.xml" dest="${unsecure.wsrf.path}/WEB-INF/etc/cagrid_NCIACoreService/jndi-config.xml">
			<!-- no xmlcatalog necessary -->
			<replace path="//:parameter[:name='databaseConnectionUrl']/:value/text()" withtext="${database.url}" />
			<replace path="//:parameter[:name='thumbnailUrl']/:value/text()" withtext="${ncia-core-grid.jboss.thumbnailUrl}" />
			<replace path="//:resource[@name='nciaDatabase']//:parameter[:name='driverClass']/:value/text()" withtext="${database.driver}" />
			<replace path="//:resource[@name='nciaDatabase']//:parameter[:name='jdbcUrl']/:value/text()" withtext="${database.url}" />
			<replace path="//:resource[@name='nciaDatabase']//:parameter[:name='user']/:value/text()" withtext="${database.user}" />
			<replace path="//:resource[@name='nciaDatabase']//:parameter[:name='password']/:value/text()" withtext="${database.password}" />
			<replace path="//:parameter[:name='tempZipLocation']/:value/text()" withtext="${ncia-core-grid.tempZipLocation}" />
		</xmltask>
		<!-- patch commons to use JNDI name that is globus friendly -->
		<mkdir dir="${unsecure.wsrf.path}/WEB-INF/lib/tmp" />
		<unjar src="${unsecure.wsrf.path}/WEB-INF/lib/nbia-dao.jar" dest="${unsecure.wsrf.path}/WEB-INF/lib/tmp" />
		<delete file="${unsecure.wsrf.path}/WEB-INF/lib/nbia-dao.jar" />
		<replaceregexp file="${unsecure.wsrf.path}/WEB-INF/lib/tmp/hibernate.properties" byline="true" match="^\s*hibernate.connection.datasource\s\s*(.*)$" replace="hibernate.connection.datasource java:comp/env/nciaDatabase" />
		<replaceregexp file="${unsecure.wsrf.path}/WEB-INF/lib/tmp/hibernate.properties" byline="true" match="^\s*hibernate.connection.driver_class\s\s*(.*)$" replace="hibernate.connection.driver_class ${database.driver}" />
		<replaceregexp file="${unsecure.wsrf.path}/WEB-INF/lib/tmp/hibernate.properties" byline="true" match="^\s*hibernate.dialect\s\s*(.*)$" replace="hibernate.dialect ${database.dialect}" />
		<xmltask source="${unsecure.wsrf.path}/WEB-INF/lib/tmp/NCIA.csm.new.hibernate.cfg.xml" dest="${unsecure.wsrf.path}/WEB-INF/lib/tmp/NCIA.csm.new.hibernate.cfg.xml" preservetype="true">
			<!--xmlcatalog refid="bda.xml.catalog"/-->
			<replace path="//property[@name='connection.datasource']/text()" withtext="java:comp/env/nciaDatabase" />
			<replace path="//property[@name='dialect']/text()" withtext="${database.dialect}" />
			<replace path="//property[@name='connection.driver_class']/text()" withtext="${database.driver}" />
		</xmltask>
		<jar jarfile="${unsecure.wsrf.path}//WEB-INF/lib/nbia-dao.jar" compress="false">
			<fileset dir="${unsecure.wsrf.path}/WEB-INF/lib/tmp">
				<include name="*/**" />
			</fileset>
		</jar>
		<delete dir="${unsecure.wsrf.path}/WEB-INF/lib/tmp" />
		<mkdir dir="${unsecure.wsrf.path}/WEB-INF/lib/tmp" />
		<unjar src="${unsecure.wsrf.path}/WEB-INF/lib/ncia-orm.jar" dest="${unsecure.wsrf.path}/WEB-INF/lib/tmp" />
		<delete file="${unsecure.wsrf.path}/WEB-INF/lib/ncia-orm.jar" />
		<xmltask source="${unsecure.wsrf.path}/WEB-INF/lib/tmp/hibernate.cfg.xml" dest="${unsecure.wsrf.path}/WEB-INF/lib/tmp/hibernate.cfg.xml" preservetype="true">
			<replace path="//property[@name='dialect']/text()" withtext="${database.dialect}" />
		</xmltask>
		<jar jarfile="${unsecure.wsrf.path}/WEB-INF/lib/ncia-orm.jar" compress="false">
			<fileset dir="${unsecure.wsrf.path}/WEB-INF/lib/tmp">
				<include name="*/**" />
			</fileset>
		</jar>
		<delete dir="${unsecure.wsrf.path}/WEB-INF/lib/tmp" />
		<copy file="${common.resources.dir}/grid/resolution_port_type.wsdl" todir="${unsecure.wsrf.path}/share/schema/resolutionService/" overwrite="true" />
		<zip update="false" destfile="${unsecure.grid.deploy.dir}/wsrf.zip">
			<zipfileset dir="${unsecure.grid.deploy.dir}/wsrf" />
		</zip>
		<zip update="false" destfile="${unsecure.grid.deploy.dir}/caGridTransfer.zip">
			<zipfileset dir="${unsecure.grid.deploy.dir}/caGridTransfer" />
		</zip>
		<copy file="${common.resources.dir}/grid/properties-service.xml" todir="${unsecure.grid.deploy.dir}" overwrite="true">
		</copy>
		<delete dir="${unsecure.grid.deploy.dir}/wsrf" />
		<delete dir="${unsecure.grid.deploy.dir}/caGridTransfer" />
		<!-- install sync-gts in support of Secure Grid being enabled  see macro "appserver-install-sync-gts" -->
	</target>
	
	<target name="build:db:new" depends="build:nbia-liquibase" description="Create new database ">
		<echoproperties prefix="database" />
		<path id="liquibase_stuff">
			<pathelement location="${dist.exploded.dir}/nbia-liquibase/nbia-liquibase.jar" />
			<pathelement location="${target.dir}/lib/nbia-liquibase/compile/liquibase-core-1.9.3.jar" />
			<pathelement location="${database.driver.file}" />
		</path>
		<taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="${dist.exploded.dir}/nbia-liquibase/ant-classloadertask-1.0-RC2.jar" />
		<classloader loader="project" classpathref="liquibase_stuff" />
		<taskdef resource="liquibasetasks.properties">
			<classpath refid="liquibase_stuff" />
		</taskdef>
		<copy todir="${db-install.dist.dir}" overwrite="true">
			<fileset dir="${db-install.src.dir}/${database.type}">
				<include name="**/*.sql" />
			</fileset>
		</copy>
		<echo message="Dropping database objects" />
		<dropAllDatabaseObjects driver="${database.driver}" url="${database.url}" username="${database.user}" password="${database.password}" promptOnNonLocalDatabase="${prompt.user.if.not.local.database}" classpathref="liquibase_stuff" defaultSchemaName="${database.schema}" />
		<switch value="${database.type}">
			<case value="oracle">
				<for list="${db.install.create.oracle.file.list}" param="db.install.file">
					<sequential>
						<sql driver="${database.driver}" url="${database.url}" userid="${database.user}" password="${database.password}" src="${db-install.dist.dir}/@{db.install.file}" onerror="abort" autocommit="true" delimiter=";" delimitertype="row" keepformat="true">
							<classpath>
								<pathelement location="${database.driver.file}" />
							</classpath>
						</sql>
					</sequential>
				</for>
			</case>
			<case value="mysql">
				<for list="${db.install.create.mysql.file.list}" param="db.install.file">
					<sequential>
						<sql driver="${database.driver}" url="${database.url}" userid="${database.user}" password="${database.password}" src="${db-install.dist.dir}/@{db.install.file}" onerror="abort" autocommit="true" delimiter=";" delimitertype="normal" keepformat="true">
							<classpath>
								<pathelement location="${database.driver.file}" />
							</classpath>
						</sql>
					</sequential>
				</for>
			</case>
		</switch>
		<antcall target="build:db:update" />
		<if>
			<isset property="database.release.version" />
			<then>
				<tagDatabase driver="${database.driver}" url="${database.url}" username="${database.user}" password="${database.password}" classpathref="liquibase_stuff" defaultSchemaName="${database.schema}" tag="${database.release.version}">
				</tagDatabase>
			</then>
			<else>
				<fail message="Variable database.release.version must be set for possible future rolllback." />
			</else>
		</if>
		<!-- should be part of the new database creation script TBD -->
		<!--antcall target="create-guest-account"/-->
	</target>
	
	<target name="build:db:update" description="Update database">
		<echoproperties prefix="database" />
		<if>
			<available file="${dist.exploded.dir}/nbia-liquibase/nbia-liquibase.jar" />
			<then>
				<echo message="Liquibase lib is created already" />
			</then>
			<else>
				<antcall target="build:nbia-liquibase" />
			</else>
		</if>
		<path id="liquibase_stuff">
			<pathelement location="${dist.exploded.dir}/nbia-liquibase/nbia-liquibase.jar" />
			<pathelement location="${target.dir}/lib/nbia-liquibase/compile/liquibase-core-1.9.3.jar" />
			<pathelement location="${database.driver.file}" />
		</path>
		<taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="${dist.exploded.dir}/nbia-liquibase/ant-classloadertask-1.0-RC2.jar" />
		<classloader loader="project" classpathref="liquibase_stuff" />
		<taskdef resource="liquibasetasks.properties">
			<classpath refid="liquibase_stuff" />
		</taskdef>
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}/${database.type}">
				<include name="**/**/db-upgrade.xml" />
			</fileset>
		</copy>
		<property name="database.changelog.file" value="${db-upgrade.dist.dir}/db-upgrade.xml" />
		<!--basename property="changelog.file" file="${database.changelog.file}"/>
<echo message="changelog.file=${changelog.file} database.changelog.file=${database.changelog.file}"/-->
		<updateDatabase driver="${database.driver}" url="${database.url}" username="${database.user}" password="${database.password}" classpathref="liquibase_stuff" promptOnNonLocalDatabase="${prompt.user.if.not.local.database}" defaultSchemaName="${database.schema}" dropFirst="false" changeLogFile="${database.changelog.file}" />
	</target>
	
	<target name="install:ctp" description="install ctp to application base path" depends="dist:ctp-client, dist:ctp-server">
	<!-- Set application.base.path based on platform -->
  <condition property="application.base.path" value="${application.base.path.linux}">
    <or>
      <os family="unix" />
      <os family="mac" />
    </or>
  </condition>

  <condition property="application.base.path" value="${application.base.path.windows}">
    <os family="windows" />
   </condition>
   
   <echo message= "Installed CTP Client in ${application.base.path}"/>
   <delete dir="${application.base.path}/CTP-Client" />
   <unzip dest="${application.base.path}/CTP-Client" src="${nbia-ctp.dist.dir}/CTP_Client.zip" />
   
   <echo message= "Installed CTP Server in ${application.base.path}"/>
   <delete dir="${application.base.path}/CTP-Server" />
   <unzip dest="${application.base.path}/CTP-Server" src="${nbia-ctp.dist.dir}/CTP_Server.zip" />
	</target>
	
   <target name="nbia:runUtility" description="run the utility to correct db" depends="build:nbia-ctp">	
	 <java jar="${nbia-ctp.dist.dir}/nbiaDatabaseUpdator.jar" fork="true"/>
   </target>	
</project>
